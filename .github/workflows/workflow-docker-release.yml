name: workflow-docker-release

on:
  push:
    branch:
      - '*'

jobs:
  gcr-dockerhub-build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU for multi-arch support
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: DEBUG Show Runners environment
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 120
          command: |
            export
      - name: Identify GitHub Release tag name
        # get tag name from runners environment 'GITHUB_REF_NAME' and then use bash substring
        # to strip out '+' symbol - required due to gcr not supporting this as a tag
        # name (docker hub does support it).
        # note if push is NOT triggered by tag then 'GITHUB_REF_NAME' will be the branch name.
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 120
          command: |
            tag="${GITHUB_REF_NAME}" && echo "tag=${tag//+/-}" >> $GITHUB_OUTPUT
            echo "[debug] Generated tag name is '${tag}'"
            echo "tag=$tag" >> $GITHUB_OUTPUT
        id: identify_github_release_tag_name
      - name: Generate temporary tag name
        shell: bash
        run: |
          test_tag=$(date +%Y%m%d%H%M%S)
          echo "[debug] Generated test tag name is '${test_tag}'"
          echo "test_tag=$test_tag" >> $GITHUB_OUTPUT
        id: generate_temporary_tag_name
      - name: Generate app name
        shell: bash
        run: |
          app_name=$(echo "${GITHUB_REPOSITORY}" | grep -P -o -m 1 '(?<=/arch-).*')
          echo "[debug] Generated app name is '${app_name}'"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
        id: generate_app_name
      - name: Build amd64 image and export to Docker for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: neneya/arch-qbittorrentvpn:${{ steps.generate_temporary_tag_name.outputs.test_tag }}
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.tag }}
      - name: Run tests using previously built image
        shell: bash
        run: |
          git_clone_scripts_dest="/tmp/scripts"
          git_clone_scripts_repo="https://github.com/binhex/scripts.git"
          git clone "${git_clone_scripts_repo}" "${git_clone_scripts_dest}"
          "${git_clone_scripts_dest}/shell/arch/docker/testrunner.sh" --app-name ${{ steps.generate_app_name.outputs.app_name }} --image-name "ghcr.io/${{ github.repository }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}"
      # note this will re-use the internal cached amd64 image from the previous build
      - name: Build multi-arch Docker image, tag and push to registries
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: neneya/arch-qbittorrentvpn:latest, neneya/arch-qbittorrentvpn:${{ steps.identify_github_release_tag_name.outputs.tag }}
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.tag }}
